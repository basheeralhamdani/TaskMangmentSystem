@model TaskManagementSystem.API.Models.TaskViewModel
@{
    ViewData["Title"] = "Delete Task";
}

<div class="min-h-screen bg-gray-50">
    <div class="container mx-auto px-4 py-8">
        <div class="mb-6">
            <a href="@Url.Action("Index", "Tasks")" class="text-blue-600 hover:text-blue-800 font-medium flex items-center transition-colors duration-150">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
                </svg>
                Back to Tasks
            </a>
        </div>

        <div class="bg-white rounded-xl shadow-md overflow-hidden">
            <div class="px-6 py-4 border-b border-gray-200">
                <h1 class="text-2xl font-bold text-gray-800">Delete Task</h1>
                <p class="text-gray-600 mt-1">Are you sure you want to delete this task? This action cannot be undone.</p>
            </div>

            <div class="p-6">
                <div class="bg-red-50 border-l-4 border-red-500 p-4 mb-6 rounded-r-lg">
                    <div class="flex">
                        <div class="flex-shrink-0">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-red-400" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd" />
                            </svg>
                        </div>
                        <div class="ml-3">
                            <p class="text-sm text-red-700">
                                <strong>Warning:</strong> This action will permanently delete the task and all associated data.
                            </p>
                        </div>
                    </div>
                </div>

                <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
                    <div>
                        <h3 class="text-sm font-medium text-gray-500">Task Details</h3>
                        <dl class="mt-2 space-y-2">
                            <div>
                                <dt class="text-sm font-medium text-gray-900">Title</dt>
                                <dd class="text-sm text-gray-700 mt-1">@Model.Title</dd>
                            </div>
                            <div>
                                <dt class="text-sm font-medium text-gray-900">Description</dt>
                                <dd class="text-sm text-gray-700 mt-1">@Model.Description</dd>
                            </div>
                            <div>
                                <dt class="text-sm font-medium text-gray-900">System</dt>
                                <dd class="text-sm text-gray-700 mt-1">@Model.SystemName</dd>
                            </div>
                        </dl>
                    </div>

                    <div>
                        <h3 class="text-sm font-medium text-gray-500">Task Information</h3>
                        <dl class="mt-2 space-y-2">
                            <div>
                                <dt class="text-sm font-medium text-gray-900">Status</dt>
                                <dd class="mt-1">
                                    <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full 
                                        @(Model.Status == TaskStatus.Completed ? "bg-green-100 text-green-800" : 
                                          Model.Status == TaskStatus.Pending ? "bg-yellow-100 text-yellow-800" : 
                                          Model.Status == TaskStatus.InProgress ? "bg-blue-100 text-blue-800" : 
                                          "bg-gray-100 text-gray-800")">
                                        @Model.Status
                                    </span>
                                </dd>
                            </div>
                            <div>
                                <dt class="text-sm font-medium text-gray-900">Priority</dt>
                                <dd class="mt-1">
                                    <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full 
                                        @(Model.Priority == PriorityLevel.Critical ? "bg-red-100 text-red-800" : 
                                          Model.Priority == PriorityLevel.High ? "bg-orange-100 text-orange-800" : 
                                          Model.Priority == PriorityLevel.Medium ? "bg-yellow-100 text-yellow-800" : 
                                          "bg-green-100 text-green-800")">
                                        @Model.Priority
                                    </span>
                                </dd>
                            </div>
                            <div>
                                <dt class="text-sm font-medium text-gray-900">Assigned To</dt>
                                <dd class="text-sm text-gray-700 mt-1">@Model.AssignedToUsername</dd>
                            </div>
                        </dl>
                    </div>
                </div>

                <form asp-action="Delete" class="flex justify-end space-x-3">
                    @Html.AntiForgeryToken()
                    <input type="hidden" asp-for="Id" />

                    <a href="@Url.Action("Index", "Tasks")" class="px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-all duration-300">
                        Cancel
                    </a>
                    <button type="submit" class="px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-red-600 hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 transition-all duration-300 transform hover:scale-105">
                        Delete Task
                    </button>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const form = document.querySelector('form');
            if (form) {
                form.addEventListener('submit', function(e) {
                    // Show confirmation dialog with custom styling
                    e.preventDefault();

                    const modal = document.createElement('div');
                    modal.className = 'fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center z-50 transition-opacity duration-300';
                    modal.innerHTML = `
                        <div class="bg-white rounded-lg p-6 max-w-md w-full transform transition-all duration-300 scale-95 opacity-0">
                            <div class="flex justify-between items-center mb-4">
                                <h3 class="text-lg font-medium text-gray-900">Confirm Deletion</h3>
                                <button type="button" class="text-gray-400 hover:text-gray-500">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                                    </svg>
                                </button>
                            </div>
                            <p class="text-sm text-gray-500 mb-4">Are you sure you want to delete this task? This action cannot be undone.</p>
                            <div class="flex justify-end space-x-3">
                                <button type="button" class="px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 transition-all duration-300 cancel-button">
                                    Cancel
                                </button>
                                <button type="button" class="px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-red-600 hover:bg-red-700 transition-all duration-300 confirm-button">
                                    Delete
                                </button>
                            </div>
                        </div>
                    `;

                    document.body.appendChild(modal);

                    // Animate modal in
                    setTimeout(() => {
                        modal.querySelector('.bg-white').classList.remove('scale-95', 'opacity-0');
                        modal.querySelector('.bg-white').classList.add('scale-100', 'opacity-100');
                    }, 10);

                    // Handle confirm button click
                    modal.querySelector('.confirm-button').addEventListener('click', function() {
                        modal.querySelector('.bg-white').classList.add('scale-95', 'opacity-0');
                        modal.querySelector('.bg-white').classList.remove('scale-100', 'opacity-100');

                        setTimeout(() => {
                            modal.remove();
                            form.submit();
                        }, 300);
                    });

                    // Handle cancel button click or close button click
                    modal.querySelector('.cancel-button, button[type="button"]').addEventListener('click', function() {
                        modal.querySelector('.bg-white').classList.add('scale-95', 'opacity-0');
                        modal.querySelector('.bg-white').classList.remove('scale-100', 'opacity-100');

                        setTimeout(() => {
                            modal.remove();
                        }, 300);
                    });
                });
            }
        });
    </script>
}
@model TaskManagementSystem.API.Models.UserViewModel
@{
    ViewData["Title"] = "Create User";
}

<div class="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-50">
    <div class="container mx-auto px-4 py-8">
        <div class="mb-6">
            <a href="@Url.Action("Index", "Users")" class="text-blue-600 hover:text-blue-800 font-medium flex items-center transition-all duration-300 transform hover:scale-105">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
                </svg>
                Back to Users
            </a>
        </div>

        <div class="max-w-3xl mx-auto">
            <div class="bg-white rounded-xl shadow-lg overflow-hidden transform transition-all duration-300 hover:shadow-xl">
                <div class="bg-gradient-to-r from-blue-500 to-indigo-600 px-6 py-6 text-white">
                    <h1 class="text-2xl font-bold">Create New User</h1>
                    <p class="text-blue-100 mt-1">Fill in the details below to create a new user account.</p>
                </div>

                <div class="p-6">
                    <form asp-action="Create" class="space-y-6">
                        @Html.AntiForgeryToken()

                        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                            <div class="md:col-span-2">
                                <label for="Username" class="block text-sm font-medium text-gray-700 mb-1">Username</label>
                                <div class="relative rounded-md shadow-sm">
                                    <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                                        </svg>
                                    </div>
                                    <input type="text" id="Username" name="Username" class="block w-full pl-10 pr-3 py-3 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all duration-150" placeholder="Enter username" />
                                </div>
                                @Html.ValidationMessageFor(model => model.Username, "", new { @class = "text-red-500 text-sm mt-1" })
                            </div>

                            <div class="md:col-span-2">
                                <label for="Email" class="block text-sm font-medium text-gray-700 mb-1">Email Address</label>
                                <div class="relative rounded-md shadow-sm">
                                    <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
                                        </svg>
                                    </div>
                                    <input type="email" id="Email" name="Email" class="block w-full pl-10 pr-3 py-3 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all duration-150" placeholder="user@example.com" />
                                </div>
                                @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-red-500 text-sm mt-1" })
                            </div>

                            <div>
                                <label for="Password" class="block text-sm font-medium text-gray-700 mb-1">Password</label>
                                <div class="relative rounded-md shadow-sm">
                                    <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z" />
                                        </svg>
                                    </div>
                                    <input type="password" id="Password" name="PasswordHash" class="block w-full pl-10 pr-3 py-3 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all duration-150" placeholder="••••••••" />
                                </div>
                                @Html.ValidationMessageFor(model => model.PasswordHash, "", new { @class = "text-red-500 text-sm mt-1" })
                            </div>

                            <div>
                                <label for="ConfirmPassword" class="block text-sm font-medium text-gray-700 mb-1">Confirm Password</label>
                                <div class="relative rounded-md shadow-sm">
                                    <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z" />
                                        </svg>
                                    </div>
                                    <input type="password" id="ConfirmPassword" name="ConfirmPassword" class="block w-full pl-10 pr-3 py-3 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all duration-150" placeholder="••••••••" />
                                </div>
                            </div>

                            <div class="md:col-span-2">
                                <label for="Role" class="block text-sm font-medium text-gray-700 mb-1">Role</label>
                                <div class="relative rounded-md shadow-sm">
                                    <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
                                        </svg>
                                    </div>
                                    <select id="Role" name="Role" class="block w-full pl-10 pr-3 py-3 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all duration-150">
                                        <option value="User">User</option>
                                        <option value="Manager">Manager</option>
                                        <option value="TaskAdministrator">Task Administrator</option>
                                        <option value="SystemAdministrator">System Administrator</option>
                                    </select>
                                </div>
                                @Html.ValidationMessageFor(model => model.Role, "", new { @class = "text-red-500 text-sm mt-1" })
                            </div>
                        </div>

                        <div class="flex justify-end space-x-3 pt-4">
                            <a href="@Url.Action("Index", "Users")" class="px-6 py-3 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-all duration-300">
                                Cancel
                            </a>
                            <button type="submit" class="px-6 py-3 border border-transparent text-sm font-medium rounded-md text-white bg-gradient-to-r from-blue-600 to-indigo-700 hover:from-blue-700 hover:to-indigo-800 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-all duration-300 transform hover:scale-105 flex items-center">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M18 9v3m0 0v3m0-3h3m-3 0h-3m-2-5a4 4 0 11-8 0 4 4 0 018 0zM3 20a6 6 0 0112 0v1H3v-1z" />
                                </svg>
                                Create User
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Set minimum date to today for date inputs
            const today = new Date().toISOString().split('T')[0];

            // Form validation with smooth animations
            const form = document.querySelector('form');
            if (form) {
                form.addEventListener('submit', function(e) {
                    const usernameInput = document.getElementById('Username');
                    const emailInput = document.getElementById('Email');
                    const passwordInput = document.getElementById('Password');
                    const confirmPasswordInput = document.getElementById('ConfirmPassword');
                    const roleSelect = document.getElementById('Role');

                    let isValid = true;

                    if (!usernameInput.value.trim()) {
                        e.preventDefault();
                        usernameInput.classList.add('border-red-500', 'animate-pulse');
                        setTimeout(() => usernameInput.classList.remove('animate-pulse'), 1000);
                        isValid = false;
                    }

                    if (!emailInput.value.trim() || !emailInput.value.includes('@@')) {
                        e.preventDefault();
                        emailInput.classList.add('border-red-500', 'animate-pulse');
                        setTimeout(() => emailInput.classList.remove('animate-pulse'), 1000);
                        isValid = false;
                    }

                    if (!passwordInput.value.trim()) {
                        e.preventDefault();
                        passwordInput.classList.add('border-red-500', 'animate-pulse');
                        setTimeout(() => passwordInput.classList.remove('animate-pulse'), 1000);
                        isValid = false;
                    }

                    if (!confirmPasswordInput.value.trim() || confirmPasswordInput.value !== passwordInput.value) {
                        e.preventDefault();
                        confirmPasswordInput.classList.add('border-red-500', 'animate-pulse');
                        setTimeout(() => confirmPasswordInput.classList.remove('animate-pulse'), 1000);
                        isValid = false;
                    }

                    if (!roleSelect.value) {
                        e.preventDefault();
                        roleSelect.classList.add('border-red-500', 'animate-pulse');
                        setTimeout(() => roleSelect.classList.remove('animate-pulse'), 1000);
                        isValid = false;
                    }

                    if (!isValid) {
                        // Show error message with animation
                        const errorMessage = document.createElement('div');
                        errorMessage.className = 'fixed top-4 right-4 bg-red-100 border-l-4 border-red-500 text-red-700 p-4 rounded shadow-lg transform transition-all duration-500 translate-x-full';
                        errorMessage.innerHTML = `
                            <div class="flex items-center">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                                </svg>
                                <span>Please fill in all required fields correctly.</span>
                            </div>
                        `;
                        document.body.appendChild(errorMessage);

                        // Animate in
                        setTimeout(() => {
                            errorMessage.classList.remove('translate-x-full');
                        }, 10);

                        // Animate out and remove after delay
                        setTimeout(() => {
                            errorMessage.classList.add('translate-x-full');
                            setTimeout(() => errorMessage.remove(), 500);
                        }, 5000);
                    }
                });
            }

            // Add smooth transitions to form inputs
            const inputs = document.querySelectorAll('input, select, textarea');
            inputs.forEach(input => {
                input.addEventListener('focus', function() {
                    this.classList.add('ring-2', 'ring-blue-300');
                });

                input.addEventListener('blur', function() {
                    this.classList.remove('ring-2', 'ring-blue-300');
                });
            });
        });
    </script>
}
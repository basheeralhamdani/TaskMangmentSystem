@model TaskManagementSystem.API.Models.UserViewModel
@{
    ViewData["Title"] = "Edit User";
}

<div class="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-50">
    <div class="container mx-auto px-4 py-8">
        <div class="mb-6">
            <a href="@Url.Action("Index", "Users")" class="text-blue-600 hover:text-blue-800 font-medium flex items-center transition-all duration-300 transform hover:scale-105">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
                </svg>
                Back to Users
            </a>
        </div>

        <div class="max-w-3xl mx-auto">
            <div class="bg-white rounded-xl shadow-lg overflow-hidden transform transition-all duration-300 hover:shadow-xl">
                <div class="bg-gradient-to-r from-indigo-500 to-purple-600 px-6 py-6 text-white">
                    <h1 class="text-2xl font-bold">Edit User</h1>
                    <p class="text-indigo-100 mt-1">Update the details for the user below.</p>
                </div>

                <div class="p-6">
                    <form asp-action="Edit" asp-route-id="@Model.Id" method="post" class="space-y-6">
                        @Html.AntiForgeryToken()
                        <input type="hidden" asp-for="Id" />

                        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                            <div class="md:col-span-2">
                                <label asp-for="Username" class="block text-sm font-medium text-gray-700 mb-1"></label>
                                <div class="relative rounded-md shadow-sm">
                                    <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                                        </svg>
                                    </div>
                                    <input asp-for="Username" class="block w-full pl-10 pr-3 py-3 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 transition-all duration-150" />
                                </div>
                                @Html.ValidationMessageFor(model => model.Username, "", new { @class = "text-red-500 text-sm mt-1" })
                            </div>

                            <div class="md:col-span-2">
                                <label asp-for="Email" class="block text-sm font-medium text-gray-700 mb-1"></label>
                                <div class="relative rounded-md shadow-sm">
                                    <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
                                        </svg>
                                    </div>
                                    <input asp-for="Email" class="block w-full pl-10 pr-3 py-3 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 transition-all duration-150" />
                                </div>
                                @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-red-500 text-sm mt-1" })
                            </div>

                            <div>
                                <label asp-for="Role" class="block text-sm font-medium text-gray-700 mb-1"></label>
                                <div class="relative rounded-md shadow-sm">
                                    <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
                                        </svg>
                                    </div>
                                    <select asp-for="Role" asp-items="Html.GetEnumSelectList<UserRole>()" class="block w-full pl-10 pr-3 py-3 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 transition-all duration-150"></select>
                                </div>
                                @Html.ValidationMessageFor(model => model.Role, "", new { @class = "text-red-500 text-sm mt-1" })
                            </div>

                            <div>
                                <label for="LastLogin" class="block text-sm font-medium text-gray-700 mb-1">Last Login</label>
                                <div class="relative rounded-md shadow-sm">
                                    <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                                        </svg>
                                    </div>
                                    <input value="@(Model.LastLogin.HasValue ? Model.LastLogin.Value.ToString("MMMM dd, yyyy hh:mm tt") : "Never")" readonly class="block w-full pl-10 pr-3 py-3 border border-gray-300 rounded-md bg-gray-50 text-gray-500" />
                                </div>
                            </div>

                            <div>
                                <label for="CreatedAt" class="block text-sm font-medium text-gray-700 mb-1">Member Since</label>
                                <div class="relative rounded-md shadow-sm">
                                    <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                                        </svg>
                                    </div>
                                    <input value="@Model.CreatedAt.ToString("MMMM dd, yyyy")" readonly class="block w-full pl-10 pr-3 py-3 border border-gray-300 rounded-md bg-gray-50 text-gray-500" />
                                </div>
                            </div>
                        </div>

                        <div class="flex justify-end space-x-3 pt-4">
                            <a href="@Url.Action("Index", "Users")" class="px-6 py-3 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition-all duration-300">
                                Cancel
                            </a>
                            <button type="submit" class="px-6 py-3 border border-transparent text-sm font-medium rounded-md text-white bg-gradient-to-r from-indigo-600 to-purple-700 hover:from-indigo-700 hover:to-purple-800 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition-all duration-300 transform hover:scale-105 flex items-center">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                                </svg>
                                Save Changes
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Add smooth transitions to form inputs
            const inputs = document.querySelectorAll('input, select');
            inputs.forEach(input => {
                if (!input.readOnly) {
                    input.addEventListener('focus', function() {
                        this.classList.add('ring-2', 'ring-indigo-300');
                    });

                    input.addEventListener('blur', function() {
                        this.classList.remove('ring-2', 'ring-indigo-300');
                    });
                }
            });

            // Form validation with smooth animations
            const form = document.querySelector('form');
            if (form) {
                form.addEventListener('submit', function(e) {
                    const usernameInput = document.getElementById('Username');
                    const emailInput = document.getElementById('Email');
                    const roleSelect = document.getElementById('Role');

                    let isValid = true;

                    if (!usernameInput.value.trim()) {
                        e.preventDefault();
                        usernameInput.classList.add('border-red-500', 'animate-pulse');
                        setTimeout(() => usernameInput.classList.remove('animate-pulse'), 1000);
                        isValid = false;
                    }

                    if (!emailInput.value.trim() || !emailInput.value.includes('@@')) {
                        e.preventDefault();
                        emailInput.classList.add('border-red-500', 'animate-pulse');
                        setTimeout(() => emailInput.classList.remove('animate-pulse'), 1000);
                        isValid = false;
                    }

                    if (!roleSelect.value) {
                        e.preventDefault();
                        roleSelect.classList.add('border-red-500', 'animate-pulse');
                        setTimeout(() => roleSelect.classList.remove('animate-pulse'), 1000);
                        isValid = false;
                    }

                    if (isValid) {
                        // Show loading state
                        const submitButton = form.querySelector('button[type="submit"]');
                        submitButton.disabled = true;
                        submitButton.innerHTML = `
                            <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                            </svg>
                            Saving...
                        `;
                    }
                });
            }

            // Add animation to form elements on page load
            const formElements = document.querySelectorAll('input, select');
            formElements.forEach((element, index) => {
                element.style.opacity = '0';
                element.style.transform = 'translateY(20px)';

                setTimeout(() => {
                    element.style.transition = 'opacity 0.5s ease, transform 0.5s ease';
                    element.style.opacity = '1';
                    element.style.transform = 'translateY(0)';
                }, index * 100);
            });
        });
    </script>
}